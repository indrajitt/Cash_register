EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Cash_Register_code.bin -- emu8086 assembler version: 4.08  
 
[ 19-04-2020  --  23:00:14 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       #make_bin#
[   2]        :                                       
[   3]        :                                       #LOAD_SEGMENT=FFFFh#
[   4]        :                                       #LOAD_OFFSET=0000h#
[   5]        :                                       
[   6]        :                                       #CS=0000h#
[   7]        :                                       #IP=0000h#
[   8]        :                                       
[   9]        :                                       #DS=0000h#
[  10]        :                                       #ES=0000h#
[  11]        :                                       
[  12]        :                                       #SS=0000h#
[  13]        :                                       #SP=FFFEh#
[  14]        :                                       
[  15]        :                                       #AX=0000h#
[  16]        :                                       #BX=0000h#
[  17]        :                                       #CX=0000h#
[  18]        :                                       #DX=0000h#
[  19]        :                                       #SI=0000h#
[  20]        :                                       #DI=0000h#
[  21]        :                                       #BP=0000h#
[  22]        :                                       
[  23]        :                                       	
[  24]    0000: E8 48 04                              	call st1:
[  25]    0003: 00 00 00 00 00 00 00 00 00 00 00 00   	db 1021 dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00                                  
[  26]        :                                       	 ;initilaize ports
[  27]        :                                       portA equ 00h   ;8255
[  28]        :                                       portB equ 02h
[  29]        :                                       portC equ 04h
[  30]        :                                       creg1 equ 06h
[  31]        :                                       
[  32]        :                                       cnt0 equ 08h    ;8253
[  33]        :                                       cnt1 equ 0Ah
[  34]        :                                       cnt2 equ 0Ch
[  35]        :                                       creg2 equ 0Eh
[  36]        :                                       
[  37]    0400: 00                                    PORTA_VAL DB 0
[  38]    0401: 00                                    	     	PORTB_VAL DB 0
[  39]    0402: 00                                    	     	PORTC_VAL DB 0
[  40]        :                                       
[  41]    0403: FE 0E 00 FD 0E 01 FB 0E 02 F7 0E 03   	key_press_table db 0feh,0eh,00h ,0fdh,0eh,01h ,0fbh,0eh,02h ,0f7h,0eh,03h ,0efh,0eh,04h ,0dfh,0eh,05h ,0bfh,0eh,06h ,07fh,0eh,07h ,
                EF 0E 04 DF 0E 05 BF 0E 06 7F 0E 07 
                                                    
[  42]    041B: FE 0D 08 FD 0D 09 FB 0D AA F7 0D AB   									db	 0feh,0dh,08h ,0fdh,0dh,09h ,0fbh,0dh,0AAh ,0f7h,0dh,0ABh ,0dfh,0dh,0ACh ,0dfh,0dh,0ADh ,0bfh,0dh,0AEh ,07fh,0dh,0AFh ,
                DF 0D AC DF 0D AD BF 0D AE 7F 0D AF 
                                                    
[  43]    0433: FE 0B BA FD 0B BB FB 0B BC F7 0B BD   									db	 0feh,0bh,0BAh ,0fdh,0bh,0BBh ,0fbh,0bh,0BCh ,0f7h,0bh,0BDh ,0bfh,0bh,0BEh ,0dfh,0bh,0BFh ,0bfh,0bh,0CAh ,07fh,0bh,0CBh
                BF 0B BE DF 0B BF BF 0B CA 7F 0B CB 
                                                    
[  44]        :                                       
[  45]    044B:                                       st1:
[  46]    044B: B8 00 02                              	  mov       ax,0200h																											;/////////////START OF MAIN PROGRAM//////////////////
[  47]    044E: 8E D8                                 mov       ds,ax
[  48]    0450: 8E C0                                 mov       es,ax
[  49]    0452: 8E D0                                 mov       ss,ax
[  50]    0454: BC FE 0F                              mov       sp,00FFEH
[  51]        :                                       
[  52]        :                                       
[  53]        :                                       
[  54]        :                                       ;setting up 8255(Port A=00h,Port B=02h,Port C=04h,Control Reg=06h)
[  55]        :                                       ;Port A-Output to Keyboard(For detection of keypress)
[  56]        :                                       ;Port B-Output to the LCD(Data)
[  57]        :                                       ;Port C(upper)-Input from the keyboard
[  58]        :                                       ;Port C(lower)-Output to the LCD
[  59]    0457: B0 88                                 mov al,88h			
[  60]    0459: E6 06                                 out 06h,al
[  61]        :                                       
[  62]    045B: BF 00 01                              mov di,100h                 ;Setting the item array in program mode to FFFFFFFF(1 entry=6 bytes)
[  63]    045E: B9 64 00                              mov cx,100d
[  64]    0461:                                       set_next_val:
[  65]        :                                       
[  66]    0461: C7 05 FF FF                           mov word ptr[di],0FFFFh
[  67]    0465: 83 C7 02                              add di,02h
[  68]    0468: C7 05 FF FF                           mov word ptr[di],0FFFFh
[  69]    046C: 83 C7 02                              add di,02h
[  70]    046F: C7 05 FF FF                           mov word ptr[di],0FFFFh
[  71]    0473: 83 C7 02                              add di,02h
[  72]    0476: 49                                    dec cx
[  73]    0477: 75 E8                                 jnz set_next_val
[  74]        :                                       
[  75]        :                                       
[  76]        :                                       
[  77]        :                                       																																													
[  78]    0479: E8 2A 06                              call LCD_INIT
[  79]    047C: E8 A6 06                              call LCD_CLEAR
[  80]        :                                       
[  81]    047F:                                       st2:
[  82]        :                                       
[  83]    047F:                                       reset_stack_check_lock:
[  84]    047F: BC FE 0F                              				mov sp,00FFEh
[  85]    0482:                                       check_lock:																																						
[  86]    0482: E4 04                                 in al,04h
[  87]    0484: 24 80                                 and al,80h		;checking pc7 bit  for lock open?
[  88]    0486: 3C 80                                 cmp al,80h
[  89]    0488: 90 90                                 jz enter_main_program
[  90]    048A: E8 3A 01                              call lock_keypress
[  91]    048D: 80 FF EE                              cmp bh,0eeh			;Code for buzzer activation
[  92]    0490: 75 03                                 jnz no_buzzer
[  93]    0492: E8 FE 00                              call activate_buzzer
[  94]    0495:                                       no_buzzer:
[  95]    0495: EB EB                                 jmp check_lock
[  96]        :                                       
[  97]        :                                       
[  98]        :                                       
[  99]        :                                       
[ 100]    0497:                                       enter_main_program :
[ 101]    0497: E8 8B 06                              call LCD_CLEAR
[ 102]    049A: B4 53                                 		mov ah,'S'
[ 103]    049C: E8 91 06                              call LCD_WRITE_CHAR
[ 104]    049F: B4 59                                 mov ah,'Y'
[ 105]    04A1: E8 8C 06                              call LCD_WRITE_CHAR
[ 106]    04A4: B4 53                                 mov ah,'S'
[ 107]    04A6: E8 87 06                              call LCD_WRITE_CHAR
[ 108]    04A9: B4 54                                 mov ah,'T'
[ 109]    04AB: E8 82 06                              call LCD_WRITE_CHAR
[ 110]    04AE: B4 45                                 mov ah,'E'
[ 111]    04B0: E8 7D 06                              call LCD_WRITE_CHAR
[ 112]    04B3: B4 4D                                 mov ah,'M'
[ 113]    04B5: E8 78 06                              call LCD_WRITE_CHAR
[ 114]    04B8: B4 20                                 mov ah,' '
[ 115]    04BA: E8 73 06                              call LCD_WRITE_CHAR
[ 116]    04BD: B4 52                                 mov ah,'R'
[ 117]    04BF: E8 6E 06                              call LCD_WRITE_CHAR
[ 118]    04C2: B4 45                                 mov ah,'E'
[ 119]    04C4: E8 69 06                              call LCD_WRITE_CHAR
[ 120]    04C7: B4 41                                 mov ah,'A'
[ 121]    04C9: E8 64 06                              call LCD_WRITE_CHAR
[ 122]    04CC: B4 44                                 mov ah,'D'
[ 123]    04CE: E8 5F 06                              call LCD_WRITE_CHAR
[ 124]    04D1: B4 59                                 mov ah,'Y'
[ 125]    04D3: E8 5A 06                              call LCD_WRITE_CHAR
[ 126]        :                                       								;;;Print "System Ready to the LCD screen"
[ 127]        :                                       
[ 128]    04D6:                                       check_mode:
[ 129]    04D6: E8 FB 04                              call get_keypress
[ 130]    04D9: 80 FF BC                              cmp bh,0BCh
[ 131]    04DC: 75 F8                                 jnz check_mode
[ 132]        :                                       
[ 133]    04DE:                                       print_select_mode:
[ 134]        :                                       ;Keypress is MODE
[ 135]        :                                       
[ 136]    04DE: E8 44 06                              call LCD_CLEAR
[ 137]        :                                       
[ 138]    04E1: B4 53                                 mov ah,'S'
[ 139]    04E3: E8 4A 06                              call LCD_WRITE_CHAR
[ 140]    04E6: B4 45                                 mov ah,'E'
[ 141]    04E8: E8 45 06                              call LCD_WRITE_CHAR
[ 142]    04EB: B4 4C                                 mov ah,'L'
[ 143]    04ED: E8 40 06                              call LCD_WRITE_CHAR
[ 144]    04F0: B4 45                                 mov ah,'E'
[ 145]    04F2: E8 3B 06                              call LCD_WRITE_CHAR
[ 146]    04F5: B4 43                                 mov ah,'C'
[ 147]    04F7: E8 36 06                              call LCD_WRITE_CHAR
[ 148]    04FA: B4 54                                 mov ah,'T'
[ 149]    04FC: E8 31 06                              call LCD_WRITE_CHAR
[ 150]    04FF: B4 20                                 mov ah,' '
[ 151]    0501: E8 2C 06                              call LCD_WRITE_CHAR
[ 152]    0504: B4 4D                                 mov ah,'M'
[ 153]    0506: E8 27 06                              call LCD_WRITE_CHAR
[ 154]    0509: B4 4F                                 mov ah,'O'
[ 155]    050B: E8 22 06                              call LCD_WRITE_CHAR
[ 156]    050E: B4 44                                 mov ah,'D'
[ 157]    0510: E8 1D 06                              call LCD_WRITE_CHAR
[ 158]    0513: B4 45                                 mov ah,'E'
[ 159]    0515: E8 18 06                              call LCD_WRITE_CHAR
[ 160]        :                                       ;;;Print "Select Mode" to the LCD
[ 161]        :                                       
[ 162]    0518:                                       check_trans_prog:				;Checking if keypress is transaction/program mode
[ 163]    0518: E8 B9 04                              			call get_keypress
[ 164]    051B: 80 FF BD                              cmp bh,0BDh
[ 165]    051E: 75 64                                 jnz not_trans
[ 166]        :                                       ;To get into transaction mode
[ 167]        :                                       ;;;Print Enter Trans Mode(y/N) onto LCD
[ 168]        :                                       
[ 169]    0520: E8 02 06                              call LCD_CLEAR
[ 170]        :                                       
[ 171]    0523: B4 45                                 	mov ah,'E'
[ 172]    0525: E8 08 06                              call LCD_WRITE_CHAR
[ 173]    0528: B4 4E                                 mov ah,'N'
[ 174]    052A: E8 03 06                              call LCD_WRITE_CHAR
[ 175]    052D: B4 54                                 mov ah,'T'
[ 176]    052F: E8 FE 05                              call LCD_WRITE_CHAR
[ 177]    0532: B4 45                                 mov ah,'E'
[ 178]    0534: E8 F9 05                              call LCD_WRITE_CHAR
[ 179]    0537: B4 52                                 mov ah,'R'
[ 180]    0539: E8 F4 05                              call LCD_WRITE_CHAR
[ 181]    053C: B4 20                                 mov ah,' '
[ 182]    053E: E8 EF 05                              call LCD_WRITE_CHAR
[ 183]    0541: B4 54                                 mov ah,'T'
[ 184]    0543: E8 EA 05                              call LCD_WRITE_CHAR
[ 185]    0546: B4 52                                 mov ah,'R'
[ 186]    0548: E8 E5 05                              call LCD_WRITE_CHAR
[ 187]    054B: B4 41                                 mov ah,'A'
[ 188]    054D: E8 E0 05                              call LCD_WRITE_CHAR
[ 189]    0550: B4 4E                                 mov ah,'N'
[ 190]    0552: E8 DB 05                              call LCD_WRITE_CHAR
[ 191]    0555: B4 53                                 mov ah,'S'
[ 192]    0557: E8 D6 05                              call LCD_WRITE_CHAR
[ 193]    055A: B4 3F                                 mov ah,'?'
[ 194]    055C: E8 D1 05                              call LCD_WRITE_CHAR
[ 195]        :                                       
[ 196]    055F: B4 20                                 mov ah,' '
[ 197]    0561: E8 CC 05                              call LCD_WRITE_CHAR
[ 198]    0564: B4 59                                 mov ah,'Y'
[ 199]    0566: E8 C7 05                              call LCD_WRITE_CHAR
[ 200]    0569: B4 2F                                 mov ah,'/'
[ 201]    056B: E8 C2 05                              call LCD_WRITE_CHAR
[ 202]    056E: B4 4E                                 mov ah,'N'
[ 203]    0570: E8 BD 05                              call LCD_WRITE_CHAR
[ 204]        :                                       
[ 205]        :                                       
[ 206]        :                                       
[ 207]        :                                       
[ 208]    0573:                                       t_get_confirmation:
[ 209]    0573: E8 5E 04                              call get_keypress
[ 210]    0576: 80 FF AA                              cmp bh,0AAh		;Yes code
[ 211]    0579: 75 06                                 jnz trans_not_yes
[ 212]    057B: E8 4B 02                              call transaction_mode
[ 213]    057E: E9 5D FF                              jmp print_select_mode				;Once done, go back to select mode
[ 214]        :                                       
[ 215]    0581:                                       trans_not_yes:
[ 216]    0581: E9 5A FF                              		jmp print_select_mode
[ 217]        :                                       
[ 218]    0584:                                       not_trans:
[ 219]    0584: 80 FF BE                              			cmp bh,0BEh		;Code for program mode
[ 220]    0587: 74 03 E9 52 FF                        jnz print_select_mode
[ 221]    058C: E8 5F 00                              call program_mode
[ 222]    058F: E9 4C FF                              jmp print_select_mode
[ 223]        :                                       		
[ 224]        :                                       
[ 225]        :                                       
[ 226]    0592: F4                                    HLT           ; halt!																																	///// END OF MAIN PROGRAM /////////////
[ 227]        :                                       
[ 228]        :                                       
[ 229]    0593:                                       activate_buzzer proc near
[ 230]        :                                       ;TIMER specifications
[ 231]        :                                       ;Counter0=2.5Mhz->4Hz
[ 232]        :                                       ;					counter val=62500d
[ 233]        :                                       ;         Mode 3
[ 234]        :                                       ;         Clk =2.5Mhz
[ 235]        :                                       ;					Gate=+Vcc
[ 236]        :                                       ;Counter1=4Hz(from counter0)->1 minute low pulse
[ 237]        :                                       ;					counter val=240d
[ 238]        :                                       ;         Mode 0
[ 239]        :                                       ;         Clk =4Hz
[ 240]        :                                       ;					Gate=+Vcc
[ 241]        :                                       ;Counter2=2.5Mhz->4Khz
[ 242]        :                                       ;					counter val=625d
[ 243]        :                                       ;         Mode 2
[ 244]        :                                       ;         Clk =2.5Mhz
[ 245]        :                                       ;					Gate=(clk1)'  //clk 1 through not gate for 1 min high signal
[ 246]        :                                       
[ 247]    0593: B0 36                                 		mov al,00110110b		;control word for counter 0
[ 248]    0595: E6 0E                                 out 0eh,al
[ 249]    0597: B0 70                                 mov al,01110000b		;contol word for counter 1
[ 250]    0599: E6 0E                                 out 0eh,al
[ 251]    059B: B0 B4                                 mov al,10110100b		;control word for counter 2
[ 252]    059D: E6 0E                                 out 0eh,al
[ 253]        :                                       
[ 254]    059F: B0 24                                 mov al,00100100b			;LSB for 625000
[ 255]    05A1: E6 08                                 out 08h,al
[ 256]    05A3: B0 F4                                 mov al,11110100b			;MSB for 625000
[ 257]    05A5: E6 08                                 out 08h,al
[ 258]        :                                       
[ 259]    05A7: B0 F0                                 mov al,11110000b			;LSB for 240
[ 260]    05A9: E6 0A                                 out 0ah,al
[ 261]    05AB: B0 00                                 mov al,00000000b			;MSB for 240
[ 262]    05AD: E6 0A                                 out 0ah,al
[ 263]        :                                       
[ 264]    05AF: B0 71                                 mov al,01110001b			;LSB for 625
[ 265]    05B1: E6 0C                                 out 0ch,al
[ 266]    05B3: B0 02                                 mov al,00000010b			;MSB for 625
[ 267]    05B5: E6 0C                                 out 0ch,al
[ 268]        :                                       
[ 269]    05B7:                                       check_1_min_timer:
[ 270]    05B7: B0 40                                 mov al,01000000b			;Reading count val of counter1(I minute check)
[ 271]    05B9: E6 0E                                 	out 0eh,al
[ 272]    05BB: E4 0A                                 in al,0ah
[ 273]    05BD: 8A E0                                 mov ah,al
[ 274]    05BF: E4 0A                                 in al,0ah
[ 275]    05C1: 3D 00 00                              cmp ax,00h
[ 276]    05C4: 75 F1                                 jnz check_1_min_timer
[ 277]        :                                       
[ 278]        :                                       
[ 279]        :                                       
[ 280]    05C6: C3                                    ret
[ 281]        :                                       activate_buzzer endp
[ 282]        :                                       
[ 283]        :                                       
[ 284]    05C7:                                       lock_keypress proc near																															;/////Start of LOCK_keypress proc////////////
[ 285]    05C7: 50                                    push AX
[ 286]        :                                       ;check if no keys are pressed(all high)
[ 287]    05C8:                                       lk_check_unpressed:
[ 288]    05C8: E4 04                                 in al,04h
[ 289]    05CA: 24 F0                                 and al,0f0h ;We only want higher bits
[ 290]    05CC: 3C 70                                 cmp al,70h		;TTL lock is going to be low. We know that
[ 291]    05CE: 75 F8                                 jne lk_check_unpressed
[ 292]        :                                       
[ 293]    05D0: E8 4D 03                              call delay_deb																																	
[ 294]        :                                       
[ 295]        :                                       ;No keys are pressed
[ 296]        :                                       ;check if key is pressed/ lock is closed
[ 297]    05D3:                                       lk_sec_stop:
[ 298]    05D3: E4 04                                 in al,04h
[ 299]    05D5: 24 F0                                 and al,0f0h
[ 300]    05D7: 3C F0                                 cmp al,0f0h     ;System is unlocked
[ 301]    05D9: 75 04                                 jne lk_th_stop
[ 302]    05DB: B7 FE                                 mov bh,0feh				;Different from buzzer code
[ 303]    05DD: 58                                    pop AX
[ 304]    05DE: C3                                    		ret						;The check lock code will check for system unlocked
[ 305]        :                                       
[ 306]        :                                       
[ 307]    05DF:                                       lk_th_stop:
[ 308]    05DF: E8 3E 03                              call delay_deb
[ 309]        :                                       
[ 310]    05E2: E4 04                                 in al,04h
[ 311]    05E4: 24 F0                                 and al,0f0h
[ 312]    05E6: 3C 70                                 cmp al,070h
[ 313]    05E8: 74 E9                                 je lk_sec_stop
[ 314]        :                                       
[ 315]    05EA: B7 EE                                 mov bh,0eeh		;Sensed keypress therefore sound buzzer(Buzzer code returned)
[ 316]    05EC: 58                                    pop AX
[ 317]        :                                       
[ 318]    05ED: C3                                    ret
[ 319]        :                                       endp lock_keypress																																	;///////////END OF LOCK KEYPRESS////////////
[ 320]        :                                       
[ 321]    05EE:                                       program_mode proc near																															;////////START OF PROGRAM MODE SUBROUTINE/////////////
[ 322]        :                                       
[ 323]        :                                       
[ 324]    05EE:                                       prog_get_keypress:
[ 325]        :                                       
[ 326]    05EE: E8 E3 03                              	call get_keypress		;keypress stored in bh register
[ 327]        :                                       ;cmp bh,0ffh					;checking whether lock is pressed
[ 328]        :                                       ;jnz no_lock
[ 329]        :                                       ;mov bh,0ffh		
[ 330]        :                                       ;ret									;if lock is closed return to main with ff in bh
[ 331]        :                                       
[ 332]    05F1: 80 FF AF                              cmp bh,0AFh	;Code for item no.
[ 333]    05F4: 75 02                                 	jnz no_add_item
[ 334]    05F6: EB 12                                 jmp add_item
[ 335]        :                                       
[ 336]    05F8:                                       no_add_item:
[ 337]    05F8: 80 FF CA                              cmp bh,0CAh				;checking if delete key is pressed
[ 338]    05FB: 75 03                                 jnz no_del_item
[ 339]    05FD: E9 1B 01                              jmp del_item
[ 340]        :                                       
[ 341]    0600:                                       no_del_item:
[ 342]    0600: 80 FF BC                              		cmp bh,0BCh			;checking if mode is pressed
[ 343]    0603: 75 03                                 jnz none_of_these		;then just continue to add item
[ 344]    0605: B7 DD                                 mov bh,0DDh				;Normal program mode termination
[ 345]    0607: C3                                    ret
[ 346]        :                                       
[ 347]        :                                       
[ 348]    0608:                                       none_of_these:
[ 349]    0608: EB E4                                 jmp prog_get_keypress
[ 350]        :                                       
[ 351]    060A:                                       add_item:
[ 352]    060A: BF 00 01                              	mov di,100h						; mov di,(Put in required address)
[ 353]    060D: B9 64 00                              	mov cx,100d
[ 354]        :                                       		
[ 355]        :                                       ;Traverses array to find empty space
[ 356]    0610:                                       next_loc:
[ 357]    0610: 83 3D FF                              cmp word ptr[di],0FFFFh
[ 358]    0613: 74 11                                 jz found_space
[ 359]    0615: 83 3D 00                              cmp word ptr[di],0000h
[ 360]    0618: 74 0C                                 jz found_space
[ 361]    061A: 47                                    inc di
[ 362]    061B: 47                                    inc di
[ 363]    061C: 47                                    inc di
[ 364]    061D: 47                                    inc di
[ 365]    061E: 47                                    inc di
[ 366]    061F: 47                                    inc di
[ 367]    0620: 49                                    dec cx
[ 368]    0621: 75 ED                                 jnz next_loc
[ 369]        :                                       
[ 370]    0623: B7 DD                                 mov bh,0ddh
[ 371]    0625: C3                                    ret
[ 372]        :                                       ;If more than 100 items are already present(Should not occur)
[ 373]        :                                       
[ 374]        :                                       
[ 375]        :                                       		;Item no. has to be 4-digit number(each no b/w 0 to 9)
[ 376]    0626:                                       found_space:
[ 377]    0626: B9 05 00                              		mov cx,05h
[ 378]    0629:                                       key1:
[ 379]    0629: E8 A8 03                              call get_keypress	;getting item no from user
[ 380]    062C: 80 FF 0A                              cmp bh,0Ah
[ 381]    062F: 72 1A                                 jb number					
[ 382]        :                                       ;Not number
[ 383]        :                                       
[ 384]    0631:                                       check_costkey:
[ 385]    0631: 80 FF CB                              cmp bh,0CBh			;Code for cost key
[ 386]    0634: 75 07                                 jnz ch_backspace2
[ 387]    0636: 83 F9 01                              cmp cx,01h
[ 388]    0639: 75 EE                                 jnz key1
[ 389]    063B: EB 16                                 jmp get_cost
[ 390]        :                                       
[ 391]        :                                       
[ 392]        :                                       
[ 393]    063D:                                       ch_backspace2:
[ 394]    063D: 80 FF AD                              cmp bh, 0ADh		;Backspace is pressed
[ 395]    0640: 75 E7                                 jnz key1
[ 396]    0642: 83 F9 05                              cmp cx,05h			;at max 4 backspaces
[ 397]    0645: 74 02                                 jz no_backspace
[ 398]    0647: 5A                                    pop dx
[ 399]    0648: 41                                    inc cx				;remove character from stack
[ 400]    0649:                                       no_backspace:
[ 401]    0649: EB DE                                 		jmp key1			;wait for next keypress
[ 402]        :                                       
[ 403]        :                                       
[ 404]    064B:                                       number:
[ 405]    064B: 8A DF                                 		mov bl,bh
[ 406]    064D: B7 00                                 mov bh,00h
[ 407]    064F: 53                                    push bx
[ 408]    0650: 49                                    dec cx
[ 409]    0651: 75 D6                                 jnz key1
[ 410]        :                                       
[ 411]        :                                       ;Now we have got the item number in the stack
[ 412]        :                                       
[ 413]        :                                       ;Inputting 4-digit cost(BCD)
[ 414]        :                                       
[ 415]    0653:                                       get_cost:
[ 416]        :                                       
[ 417]    0653: B9 05 00                              mov cx,05h
[ 418]        :                                       
[ 419]    0656:                                       key2:
[ 420]    0656: E8 7B 03                              call get_keypress	;getting cost from user
[ 421]    0659: 80 FF 0A                              cmp bh,0Ah
[ 422]    065C: 72 1A                                 jb number0
[ 423]        :                                       ;Not number
[ 424]        :                                       
[ 425]    065E: 80 FF AC                              cmp bh,0ACh
[ 426]    0661: 75 07                                 jnz ch_backspace0
[ 427]    0663: 83 F9 01                              cmp cx,01h
[ 428]    0666: 75 EE                                 jnz key2
[ 429]    0668: EB 1E                                 jmp showing1
[ 430]        :                                       
[ 431]        :                                       
[ 432]    066A:                                       ch_backspace0:
[ 433]    066A: 80 FF AD                              cmp bh, 0ADh		;Backspace is pressed
[ 434]    066D: 75 E7                                 jnz key2
[ 435]    066F: 83 F9 05                              cmp cx,05h
[ 436]    0672: 74 02                                 jz no_backspace0
[ 437]    0674: 5A                                    pop dx	
[ 438]    0675: 41                                    inc cx			;remove character from stack
[ 439]    0676:                                       no_backspace0:
[ 440]    0676: EB DE                                 		jmp key2				;wait for next keypress
[ 441]        :                                       
[ 442]    0678:                                       number0:
[ 443]    0678: 8A DF                                 		mov bl,bh
[ 444]    067A: B7 00                                 mov bh,00h
[ 445]    067C: 53                                    push bx
[ 446]    067D: 49                                    dec cx
[ 447]    067E: 75 D6                                 jnz key2
[ 448]        :                                       
[ 449]        :                                       ;Now we have got the cost in stack as well
[ 450]        :                                       
[ 451]        :                                       ;waiting for enter key
[ 452]    0680:                                       key3:
[ 453]    0680: E8 51 03                              		call get_keypress
[ 454]    0683: 80 FF AC                              cmp bh,0ACh
[ 455]    0686: 75 F8                                 jnz key3
[ 456]    0688:                                       showing1:
[ 457]        :                                       ;Printing to LCD for conformation
[ 458]    0688: E8 9A 04                              call LCD_CLEAR
[ 459]        :                                       
[ 460]    068B: 8B EC                                 mov bp,sp			;to print values entered by user
[ 461]    068D: 83 C5 0E                              add bp,0eh		;moving bp to beginning of entry
[ 462]        :                                       
[ 463]    0690: B9 08 00                              mov cx,08h
[ 464]        :                                       
[ 465]    0693:                                       show_next:
[ 466]    0693: 8B 46 00                              mov ax,[bp]
[ 467]    0696: 8A E0                                 mov ah,al
[ 468]    0698: 80 CC 30                              or ah,30h			;ascii value for number on stack
[ 469]    069B: E8 92 04                              call LCD_WRITE_CHAR
[ 470]    069E: 4D                                    dec bp
[ 471]    069F: 4D                                    dec bp
[ 472]    06A0: 49                                    dec cx
[ 473]    06A1: 83 F9 04                              cmp cx,04h
[ 474]    06A4: 75 0A                                 jnz x1
[ 475]    06A6: B4 20                                 mov ah,' '
[ 476]    06A8: E8 85 04                              call LCD_WRITE_CHAR
[ 477]    06AB: B4 20                                 mov ah,' '
[ 478]    06AD: E8 80 04                              call LCD_WRITE_CHAR
[ 479]        :                                       
[ 480]    06B0:                                       x1:
[ 481]    06B0: 83 F9 00                              		cmp cx,00h
[ 482]    06B3: 75 DE                                 jnz show_next
[ 483]        :                                       
[ 484]        :                                       ;Now to get confirmation of the values entered
[ 485]        :                                       
[ 486]    06B5:                                       key4:
[ 487]    06B5: E8 1C 03                              		call get_keypress
[ 488]    06B8: 80 FF AA                              cmp bh,0AAh		;Yes case
[ 489]    06BB: 75 02                                 jnz not_yes
[ 490]    06BD: EB 10                                 jmp yes_case
[ 491]    06BF:                                       not_yes:
[ 492]    06BF: 80 FF AB                              cmp bh,0ABh		;No case
[ 493]    06C2: 75 F1                                 jnz key4			;  if iits not yes or no wait for another keypress
[ 494]    06C4: 58                                    pop ax					;Clearing stack
[ 495]    06C5: 58                                    pop ax
[ 496]    06C6: 58                                    pop ax
[ 497]    06C7: 58                                    pop ax
[ 498]    06C8: 58                                    pop ax
[ 499]    06C9: 58                                    pop ax
[ 500]    06CA: 58                                    pop ax
[ 501]    06CB: 58                                    pop ax
[ 502]        :                                       
[ 503]    06CC: B7 DD                                 mov bh,0ddh		;Normal termination
[ 504]    06CE: C3                                    ret
[ 505]        :                                       
[ 506]    06CF:                                       yes_case:		;Entering values into memory
[ 507]        :                                       		;1234
[ 508]        :                                       ;01020304	
[ 509]        :                                       ;For cost
[ 510]    06CF: 5B                                    pop bx		;loading entry from stack
[ 511]    06D0: 58                                    pop ax
[ 512]        :                                       ;eg ax=0001 bx=0002
[ 513]    06D1: D0 C0 D0 C0 D0 C0 D0 C0               rol al,4h
[ 514]    06D9: 02 C3                                 add al,bl
[ 515]    06DB: 8A D0                                 mov dl,al
[ 516]        :                                       ;now dl=12
[ 517]    06DD: 5B                                    pop bx
[ 518]    06DE: 58                                    pop ax
[ 519]        :                                       ;eg ax=0001 bx=0002
[ 520]    06DF: D0 C0 D0 C0 D0 C0 D0 C0               rol al,4h
[ 521]    06E7: 02 C3                                 add al,bl
[ 522]    06E9: 8A F0                                 mov dh,al			;cost found
[ 523]        :                                       
[ 524]    06EB: 47                                    inc di
[ 525]    06EC: 47                                    inc di
[ 526]    06ED: 89 15                                 mov [di],dx			;Storing BCD cost(for outputting)
[ 527]    06EF: 47                                    inc di
[ 528]    06F0: 47                                    inc di
[ 529]    06F1: E8 36 02                              call bcd_to_bin
[ 530]    06F4: 89 15                                 mov [di],dx			;Storing binary cost(for processing)
[ 531]        :                                       
[ 532]    06F6: 4F                                    dec di
[ 533]    06F7: 4F                                    dec di
[ 534]    06F8: 4F                                    dec di
[ 535]    06F9: 4F                                    dec di					;to write item code before(Format : item cide , BCD , binary )
[ 536]        :                                       
[ 537]    06FA: 5B                                    pop bx		;loading entry from stack(for item code)
[ 538]    06FB: 58                                    pop ax
[ 539]        :                                       ;eg ax=0001 bx=0002
[ 540]    06FC: D0 C0 D0 C0 D0 C0 D0 C0               rol al,4h
[ 541]    0704: 02 C3                                 add al,bl
[ 542]    0706: 8A D0                                 mov dl,al
[ 543]        :                                       ;now dl=12
[ 544]    0708: 5B                                    pop bx
[ 545]    0709: 58                                    pop ax
[ 546]        :                                       ;eg ax=0001 bx=0002
[ 547]    070A: D0 C0 D0 C0 D0 C0 D0 C0               rol al,4h
[ 548]    0712: 02 C3                                 add al,bl
[ 549]    0714: 8A F0                                 mov dh,al			;item code found
[ 550]    0716: 89 15                                 mov [di],dx		;Item code
[ 551]        :                                       
[ 552]    0718: B7 DD                                 mov bh,0ddh
[ 553]    071A: C3                                    ret
[ 554]        :                                       ;FF34560493F
[ 555]        :                                       
[ 556]        :                                       
[ 557]    071B:                                       del_item:
[ 558]    071B:                                       key5:
[ 559]    071B: E8 B6 02                              		call get_keypress
[ 560]    071E: 80 FF AF                              cmp bh,0AFh	;Code for item no.
[ 561]    0721: 75 F8                                 	jnz key5
[ 562]    0723: EB 00                                 jmp	take_item_no
[ 563]        :                                       
[ 564]    0725:                                       take_item_no:
[ 565]    0725: B9 05 00                              		mov cx,05h
[ 566]    0728:                                       key6:
[ 567]    0728: E8 A9 02                              call get_keypress	;getting item no from user
[ 568]    072B: 80 FF 0A                              cmp bh,0Ah
[ 569]    072E: 72 1A                                 jb number6																																								
[ 570]        :                                       ;Not number
[ 571]        :                                       
[ 572]    0730: 80 FF AC                              cmp  bh,0ACh
[ 573]    0733: 75 07                                 jnz ch_backspace1
[ 574]    0735: 83 F9 01                              cmp cx,01h
[ 575]    0738: 75 EE                                 jnz key6
[ 576]    073A: EB 16                                 jmp showing
[ 577]        :                                       
[ 578]        :                                       
[ 579]        :                                       
[ 580]    073C:                                       ch_backspace1:
[ 581]    073C: 80 FF AD                              cmp bh, 0ADh		;Backspace is pressed
[ 582]    073F: 75 E7                                 jnz key6
[ 583]    0741: 83 F9 05                              cmp cx,05h
[ 584]    0744: 74 02                                 jz no_backspace6
[ 585]    0746: 5A                                    pop dx			;remove character from stack
[ 586]    0747: 41                                    inc cx
[ 587]    0748:                                       no_backspace6:
[ 588]    0748: EB DE                                 		jmp key6				;wait for next keypress
[ 589]        :                                       
[ 590]    074A:                                       number6:
[ 591]    074A: 8A DF                                 		mov bl,bh
[ 592]    074C: B7 00                                 mov bh,00h
[ 593]    074E: 53                                    push bx
[ 594]    074F: 49                                    dec cx
[ 595]    0750: 75 D6                                 jnz key6
[ 596]        :                                       		;NUmber is in the stack now
[ 597]        :                                       
[ 598]    0752:                                       showing:
[ 599]        :                                       ;Printing to LCD for conformation
[ 600]    0752: E8 D0 03                              call LCD_CLEAR
[ 601]        :                                       
[ 602]    0755: 8B EC                                 mov bp,sp			;to print values entered by user
[ 603]    0757: 83 C5 06                              add bp,06h		;moving bp to beginning of entry
[ 604]        :                                       
[ 605]    075A: B9 04 00                              mov cx,04h
[ 606]        :                                       
[ 607]    075D:                                       show_next1:
[ 608]    075D: 8B 46 00                              mov ax,[bp]
[ 609]    0760: 8A E0                                 mov ah,al
[ 610]    0762: 80 CC 30                              or ah,30h			;ascii value for number on stack
[ 611]    0765: E8 C8 03                              call LCD_WRITE_CHAR
[ 612]    0768: 4D                                    dec bp
[ 613]    0769: 4D                                    dec bp
[ 614]    076A: 49                                    dec cx
[ 615]    076B: 75 F0                                 jnz show_next1
[ 616]        :                                       
[ 617]        :                                       ;Now to get confirmation
[ 618]        :                                       
[ 619]    076D:                                       key7:
[ 620]    076D: E8 64 02                              		call get_keypress
[ 621]    0770: 80 FF AA                              cmp bh,0AAh		;Yes case
[ 622]    0773: 75 02                                 jnz not_yes7
[ 623]    0775: EB 0C                                 jmp yes_case7
[ 624]    0777:                                       not_yes7:
[ 625]    0777: 80 FF AB                              cmp bh,0ABh		;No case
[ 626]    077A: 75 F1                                 jnz key7			;  if its not yes or no wait for another keypress
[ 627]    077C: 58                                    pop ax					;Clearing stack
[ 628]    077D: 58                                    pop ax
[ 629]    077E: 58                                    pop ax
[ 630]    077F: 58                                    pop ax
[ 631]        :                                       
[ 632]    0780: B7 DD                                 mov bh,0ddh		;Normal termination
[ 633]    0782: C3                                    ret
[ 634]        :                                       
[ 635]    0783:                                       yes_case7:
[ 636]    0783: BF 00 01                              	mov di,0100h	;di is at beginning of program items array
[ 637]        :                                       
[ 638]    0786: 5B                                    pop bx
[ 639]    0787: 58                                    pop ax
[ 640]        :                                       ;ax=0002 bx=0001		xx21
[ 641]    0788: D0 C0 D0 C0 D0 C0 D0 C0               rol al,4h
[ 642]    0790: 02 C3                                 add al,bl
[ 643]        :                                       ;al=21
[ 644]    0792: 8A D0                                 mov dl,al
[ 645]        :                                       
[ 646]    0794: 5B                                    pop bx
[ 647]    0795: 58                                    pop ax
[ 648]        :                                       ;ax=0003 bx=0006		3621
[ 649]    0796: D0 C0 D0 C0 D0 C0 D0 C0               rol al,4h
[ 650]    079E: 02 C3                                 add al,bl
[ 651]        :                                       ;al=21
[ 652]    07A0: 8A F0                                 mov dh,al
[ 653]        :                                       ;Now we have item code in dx
[ 654]        :                                       
[ 655]        :                                       
[ 656]    07A2: B9 64 00                              mov cx,100d
[ 657]    07A5:                                       search:
[ 658]        :                                       		;36210010000A6754
[ 659]    07A5: 3B 15                                 cmp	dx,word ptr[di]
[ 660]    07A7: 74 0D                                 jz found_item
[ 661]    07A9: 47                                    inc di
[ 662]    07AA: 47                                    inc di
[ 663]    07AB: 47                                    inc di
[ 664]    07AC: 47                                    inc di
[ 665]    07AD: 47                                    inc di
[ 666]    07AE: 47                                    inc di
[ 667]    07AF: 49                                    dec cx
[ 668]    07B0: 75 F3                                 jnz search
[ 669]    07B2: B7 DD                                 mov bh,0ddh
[ 670]    07B4: EB 12                                 jmp e
[ 671]        :                                       
[ 672]    07B6:                                       found_item:
[ 673]    07B6: C7 05 00 00                           		mov word ptr[di],0000h
[ 674]    07BA: 47                                    inc di
[ 675]    07BB: 47                                    inc di
[ 676]    07BC: C7 05 00 00                           	mov word ptr[di],0000h
[ 677]    07C0: 47                                    inc di
[ 678]    07C1: 47                                    inc di
[ 679]    07C2: C7 05 00 00                           	mov word ptr[di],0000h
[ 680]    07C6: 47                                    inc di
[ 681]    07C7: 47                                    inc di
[ 682]        :                                       
[ 683]        :                                       
[ 684]        :                                       
[ 685]    07C8:                                       e:
[ 686]    07C8: C3                                    ret
[ 687]        :                                       
[ 688]        :                                       program_mode endp  																												;////////////////END OF PROGRAM SUBROUTINE///////////////////
[ 689]        :                                       
[ 690]        :                                       
[ 691]        :                                       
[ 692]        :                                       
[ 693]    07C9:                                       transaction_mode proc	near																							;///////////////START OF TRANSACTION MODE SUBROUTINE/////////////////
[ 694]        :                                       
[ 695]    07C9: BF 50 00                              mov di,0050h                               ;Initialise total to 0
[ 696]    07CC: C6 05 00                              mov [di],00h
[ 697]    07CF: 47                                    inc di
[ 698]    07D0: C6 05 00                              mov [di],00h
[ 699]        :                                       
[ 700]    07D3:                                       new_item:
[ 701]    07D3: E8 FE 01                              		call get_keypress		;keypress stored in bh register	
[ 702]        :                                       
[ 703]    07D6: 80 FF AF                              cmp bh,0AFh	;Code for item no.
[ 704]    07D9: 74 08                                 jz t_add_item
[ 705]        :                                       
[ 706]    07DB: 80 FF BB                              cmp bh,0BBh			;checking if total hsa  been pressed
[ 707]    07DE: 75 03 E9 0B 01                        jz show_total_cost
[ 708]        :                                       
[ 709]        :                                       
[ 710]        :                                       
[ 711]    07E3:                                       t_add_item:
[ 712]    07E3: B9 05 00                              mov cx,05h
[ 713]    07E6:                                       keyt1:
[ 714]    07E6: E8 EB 01                              call get_keypress	;getting item no from user
[ 715]    07E9: 80 FF 0A                              cmp bh,0Ah
[ 716]    07EC: 72 31                                 jb t_number					
[ 717]        :                                       ;Not number
[ 718]        :                                       
[ 719]    07EE:                                       check_cancel:
[ 720]    07EE: 80 FF AE                              		cmp bh,0AEh
[ 721]    07F1: 75 12                                 jnz check_enterkey
[ 722]    07F3: 8B C1                                 mov ax,cx
[ 723]    07F5: BB 05 00                              mov bx,05h
[ 724]    07F8: 2B D8                                 sub bx,ax			;Now we have pops to do in bx
[ 725]        :                                       
[ 726]        :                                       
[ 727]    07FA: 83 FB 00                              cmp bx,0h
[ 728]    07FD: 74 04                                 jz no_pop
[ 729]    07FF:                                       next_pop:
[ 730]    07FF: 58                                    pop ax
[ 731]    0800: 4B                                    dec bx
[ 732]    0801: 75 FC                                 jnz next_pop
[ 733]    0803:                                       no_pop:
[ 734]    0803: EB DE                                 jmp t_add_item
[ 735]        :                                       
[ 736]        :                                       
[ 737]        :                                       
[ 738]    0805:                                       check_enterkey:
[ 739]    0805: 80 FF AC                              cmp bh,0ACh			;Code for enter key
[ 740]    0808: 75 07                                 jnz t_ch_backspace2
[ 741]    080A: 83 F9 01                              cmp cx,01h
[ 742]    080D: 75 D7                                 jnz keyt1
[ 743]    080F: EB 16                                 jmp t_showing1
[ 744]        :                                       
[ 745]        :                                       
[ 746]        :                                       
[ 747]    0811:                                       t_ch_backspace2:
[ 748]    0811: 80 FF AD                              cmp bh, 0ADh		;Backspace is pressed
[ 749]    0814: 75 D0                                 jnz keyt1
[ 750]    0816: 83 F9 05                              cmp cx,05h			;at max 4 backspaces
[ 751]    0819: 74 02                                 jz t_no_backspace
[ 752]    081B: 5A                                    pop dx				;remove character from stack
[ 753]    081C: 41                                    inc cx
[ 754]    081D:                                       t_no_backspace:
[ 755]    081D: EB C7                                 		jmp keyt1			;wait for next keypress
[ 756]        :                                       
[ 757]        :                                       
[ 758]    081F:                                       t_number:
[ 759]    081F: 8A DF                                 		mov bl,bh
[ 760]    0821: B7 00                                 mov bh,00h
[ 761]    0823: 53                                    push bx
[ 762]    0824: 49                                    dec cx
[ 763]    0825: 75 BF                                 jnz keyt1
[ 764]        :                                       
[ 765]        :                                       ;Now we have got the item number in the stack
[ 766]        :                                       
[ 767]        :                                       
[ 768]    0827:                                       t_showing1:
[ 769]        :                                       ;Printing to LCD for conformation
[ 770]    0827: E8 FB 02                              call LCD_CLEAR
[ 771]        :                                       
[ 772]    082A: 8B EC                                 mov bp,sp			;to print values entered by user
[ 773]    082C: 83 C5 06                              add bp,06h		;moving bp to beginning of entry
[ 774]        :                                       
[ 775]    082F: B9 04 00                              mov cx,04h
[ 776]        :                                       
[ 777]    0832:                                       t_show_next:
[ 778]    0832: 8B 46 00                              mov ax,[bp]
[ 779]    0835: 8A E0                                 mov ah,al
[ 780]    0837: 80 CC 30                              or ah,30h			;ascii value for number on stack
[ 781]    083A: E8 F3 02                              call LCD_WRITE_CHAR
[ 782]    083D: 4D                                    dec bp
[ 783]    083E: 4D                                    dec bp
[ 784]    083F: 49                                    dec cx
[ 785]    0840: 75 F0                                 jnz t_show_next
[ 786]        :                                       
[ 787]        :                                       
[ 788]    0842:                                       t_check_qty:
[ 789]    0842: E8 8F 01                              		call get_keypress
[ 790]    0845: 80 FF BA                              		cmp bh,0BAh
[ 791]    0848: 75 F8                                 jnz t_check_qty
[ 792]        :                                       
[ 793]        :                                       
[ 794]        :                                       
[ 795]        :                                       
[ 796]        :                                       
[ 797]        :                                       
[ 798]        :                                       
[ 799]    084A:                                       get_qty:
[ 800]        :                                       
[ 801]    084A: B9 03 00                              mov cx,03h
[ 802]        :                                       
[ 803]    084D:                                       t_key2:
[ 804]    084D: E8 84 01                              call get_keypress	;getting quantity from user
[ 805]    0850: 80 FF 0A                              cmp bh,0Ah
[ 806]    0853: 72 18                                 jb t_number0
[ 807]        :                                       ;Not number
[ 808]        :                                       
[ 809]    0855: 80 FF AC                              cmp bh,0ACh  			;0ACh is the code for ENTER
[ 810]    0858: 75 05                                 jnz t_ch_backspace0
[ 811]    085A: 83 F9 01                              cmp cx,01h
[ 812]    085D: 75 EE                                 jnz t_key2
[ 813]        :                                       ;jmp showing1
[ 814]        :                                       
[ 815]        :                                       
[ 816]    085F:                                       t_ch_backspace0:
[ 817]    085F: 80 FF AD                              cmp bh, 0ADh			;Backspace is pressed
[ 818]    0862: 75 E9                                 jnz t_key2
[ 819]    0864: 83 F9 03                              cmp cx,03h
[ 820]    0867: 74 02                                 jz t_no_backspace0
[ 821]    0869: 5A                                    pop dx				;remove character from stack
[ 822]    086A: 41                                    inc cx
[ 823]    086B:                                       t_no_backspace0:
[ 824]    086B: EB E0                                 		jmp t_key2				;wait for next keypress
[ 825]        :                                       
[ 826]    086D:                                       t_number0:
[ 827]    086D: 8A DF                                 		mov bl,bh
[ 828]    086F: B7 00                                 mov bh,00h
[ 829]    0871: 53                                    push bx
[ 830]    0872: 49                                    dec cx
[ 831]    0873: 75 D8                                 jnz t_key2
[ 832]        :                                       
[ 833]        :                                       ;Now we have got the quantity in stack as well(with item no.)
[ 834]        :                                       
[ 835]        :                                       ;Calculation starts(for the item entered)
[ 836]        :                                       ;Current cost = Item cost * qty
[ 837]        :                                       ;total cost += current cost
[ 838]    0875: 5B                                    pop bx
[ 839]    0876: 58                                    pop ax
[ 840]    0877: D0 C0 D0 C0 D0 C0 D0 C0               rol al,4h
[ 841]    087F: 02 C3                                 add al,bl
[ 842]    0881: 8A D0                                 mov dl,al
[ 843]    0883: B6 00                                 mov dh,00h
[ 844]    0885: E8 A2 00                              call bcd_to_bin
[ 845]        :                                       
[ 846]    0888: 5B                                    pop bx
[ 847]    0889: 58                                    pop ax
[ 848]    088A: D0 C0 D0 C0 D0 C0 D0 C0               rol al,4h
[ 849]    0892: 02 C3                                 add al,bl
[ 850]    0894: 8A C8                                 mov cl,al
[ 851]        :                                       
[ 852]    0896: 5B                                    pop bx
[ 853]    0897: 58                                    pop ax
[ 854]    0898: D0 C0 D0 C0 D0 C0 D0 C0               rol al,4h
[ 855]    08A0: 02 C3                                 add al,bl
[ 856]    08A2: 8A E8                                 mov ch,al
[ 857]        :                                       
[ 858]        :                                       ;Now cx contains the item code, which we need to check with the program array to get the cost
[ 859]        :                                       ;di contains start of program array
[ 860]    08A4: BF 00 01                              mov di,0100h
[ 861]    08A7: B8 64 00                              mov ax,100d
[ 862]    08AA:                                       t_find_item:
[ 863]    08AA: 3B 0D                                 cmp cx,word ptr[di]
[ 864]    08AC: 74 0C                                 jz t_item_found
[ 865]    08AE: 47                                    inc di
[ 866]    08AF: 47                                    inc di
[ 867]    08B0: 47                                    inc di
[ 868]    08B1: 47                                    inc di
[ 869]    08B2: 47                                    inc di
[ 870]    08B3: 47                                    inc di
[ 871]    08B4: 48                                    dec ax
[ 872]    08B5: 75 F3                                 jnz t_find_item
[ 873]    08B7: E9 29 FF                              jmp t_add_item
[ 874]        :                                       
[ 875]    08BA:                                       t_item_found:
[ 876]    08BA: 47                                    		inc di
[ 877]    08BB: 47                                    inc di
[ 878]    08BC: 47                                    inc di
[ 879]    08BD: 47                                    inc di
[ 880]        :                                       	;Now we are at binary cost of the item
[ 881]    08BE: 8B 05                                 mov ax,word ptr[di]
[ 882]    08C0: 47                                    inc di
[ 883]    08C1: 47                                    inc di
[ 884]        :                                       ;Now we have binary qty in dx and binary cost in ax
[ 885]        :                                       
[ 886]    08C2: F7 E2                                 mul dx
[ 887]    08C4: 8B D0                                 mov dx,ax
[ 888]    08C6: 52                                    push dx
[ 889]        :                                       ;;Sure that dx =00h and only ax contains actual cost of item in binary
[ 890]        :                                       ;To show the cost of the item(stored in dx)
[ 891]        :                                       
[ 892]        :                                       ;DS:0010 to DS:0014 used by by bin_to_bcd subroutine
[ 893]    08C7: BF 10 00                              mov di,10h																																					;1		CHECKED DURING EMULATOR RUN
[ 894]    08CA: E8 BC 00                              call bin_to_bcd
[ 895]        :                                       
[ 896]    08CD: E8 55 02                              call LCD_CLEAR
[ 897]        :                                       
[ 898]    08D0: B9 05 00                              mov cx,05h			;di to di+4  has the bcd cost of the current item
[ 899]        :                                       
[ 900]    08D3:                                       cur_cost_show_next:
[ 901]    08D3: 8B 05                                 mov ax,[di]
[ 902]    08D5: 8A E0                                 mov ah,al
[ 903]    08D7: 80 CC 30                              or ah,30h			;ascii value for number at di + x
[ 904]    08DA: E8 53 02                              call LCD_WRITE_CHAR
[ 905]    08DD: 47                                    		inc di
[ 906]    08DE: 49                                    dec cx
[ 907]    08DF: 75 F2                                 jnz cur_cost_show_next
[ 908]        :                                       
[ 909]    08E1: 5A                                    pop dx
[ 910]        :                                       ;Adding dx to the total cost
[ 911]        :                                       ;DS:0050 and DS:0051 used to keep total
[ 912]    08E2: BF 50 00                              mov di,0050h																																				;	2		CHECKED DURING EMULATOR RUN
[ 913]    08E5: 8B 05                                 mov ax,[di]
[ 914]    08E7: 03 C2                                 add ax,dx
[ 915]    08E9: 89 05                                 mov [di],ax
[ 916]        :                                       
[ 917]    08EB: E9 E5 FE                              jmp new_item
[ 918]        :                                       
[ 919]        :                                       					
[ 920]    08EE:                                       show_total_cost:
[ 921]        :                                       
[ 922]        :                                       ;DS:0050 to DS:0051 used for total
[ 923]    08EE: BF 50 00                              mov di,0050h
[ 924]        :                                       																																				;	2		CHECKED DURING EMULATOR RUN
[ 925]    08F1: 8B 05                                 mov ax,[di]
[ 926]    08F3: 8B D0                                 mov dx,ax
[ 927]        :                                       
[ 928]        :                                       ;DS:0010 to DS:0014 used by by bin_to_bcd subroutine
[ 929]    08F5: BF 10 00                              mov di,10h																																					;1   CHECKED DURING EMULATOR RUN
[ 930]        :                                       
[ 931]    08F8: E8 8E 00                              	call bin_to_bcd
[ 932]        :                                       
[ 933]    08FB: E8 27 02                              call LCD_CLEAR
[ 934]        :                                       
[ 935]    08FE: B9 05 00                              mov cx,05h
[ 936]    0901: 8B C2                                 mov ax,dx
[ 937]        :                                       
[ 938]    0903:                                       tot_cost_show_next:
[ 939]    0903: 8B 05                                 mov ax,[di]
[ 940]    0905: 8A E0                                 mov ah,al
[ 941]    0907: 80 CC 30                              or ah,30h			;ascii value for number at di + x
[ 942]    090A: E8 23 02                              call LCD_WRITE_CHAR
[ 943]    090D: 47                                    		inc di
[ 944]    090E: 49                                    dec cx
[ 945]    090F: 75 F2                                 jnz tot_cost_show_next
[ 946]    0911: 51                                    push CX
[ 947]    0912: B9 50 C3                              mov CX,50000d           ;1 second delay
[ 948]    0915: E8 13 02                              call DELAY
[ 949]    0918: B9 50 C3                              mov CX,50000d           ;1 second delay
[ 950]    091B: E8 0D 02                              call DELAY
[ 951]    091E: 59                                    pop CX
[ 952]        :                                       
[ 953]    091F: C3                                    ret
[ 954]        :                                       transaction_mode endp
[ 955]        :                                       																											;/////////////END OF TRANSACTION MODE SUBROUTINE/////////////
[ 956]        :                                       
[ 957]        :                                       
[ 958]        :                                       
[ 959]    0920:                                       delay_deb proc near																									;///////////////////START OF DELAY//////////////////////////////
[ 960]    0920: 51                                    push CX
[ 961]    0921: B9 E8 03                              mov CX,1000d              ;For 20 ms delay
[ 962]    0924: E3 02                                 	JCXZ DEB_DELAY_END
[ 963]    0926:                                       	DEB_DEL_LOOP:
[ 964]    0926: E2 FE                                 	LOOP DEB_DEL_LOOP	
[ 965]    0928:                                       	DEB_DELAY_END:
[ 966]    0928: 59                                    	pop CX
[ 967]    0929: C3                                    RET
[ 968]        :                                       delay_deb endp
[ 969]        :                                       
[ 970]        :                                       
[ 971]    092A:                                       bcd_to_bin proc near																										;////////////START OF BCD_TO_BIN SUBROUTINE//////////////////
[ 972]        :                                       ;input= 2 byte bcd number in DX
[ 973]        :                                       ;output= 2 byte binary number in DX
[ 974]    092A: 50                                    push AX
[ 975]    092B: 51                                    push CX
[ 976]    092C: 53                                    push BX
[ 977]    092D: B8 00 00                              mov ax,0h
[ 978]    0930: 8B DA                                 mov bx,dx
[ 979]    0932: 8B CA                                 mov cx,dx
[ 980]    0934: 80 E7 F0                              and bh,0f0h
[ 981]    0937: D0 CF D0 CF D0 CF D0 CF               ror bh,4h
[ 982]    093F: 80 E5 0F                              and ch,0fh
[ 983]    0942: 80 E3 F0                              and bl,0f0h
[ 984]    0945: D0 CB D0 CB D0 CB D0 CB               ror bl,4h
[ 985]    094D: 80 E1 0F                              and cl,0fh
[ 986]        :                                       ;Now digits are in bh,ch,bl,cl
[ 987]        :                                       ;push CX
[ 988]        :                                       ;DX will contain sum
[ 989]    0950: BA 00 00                              mov DX,0h
[ 990]    0953: 52                                    push DX
[ 991]        :                                       
[ 992]    0954: 8A C7                                 mov al,bh
[ 993]    0956: BA E8 03                              mov dx,1000d
[ 994]    0959: F7 E2                                 mul dx
[ 995]    095B: 5A                                    pop dx
[ 996]    095C: 03 D0                                 add dx,ax
[ 997]    095E: 52                                    push dx
[ 998]        :                                       
[ 999]    095F: B8 00 00                              mov ax,0h
[1000]    0962: 8A C3                                 mov al,bl
[1001]    0964: B6 0A                                 mov dh,10d
[1002]    0966: F6 E6                                 mul dh
[1003]    0968: 5A                                    pop dx
[1004]    0969: 03 D0                                 add dx,ax
[1005]    096B: 52                                    push dx
[1006]        :                                       
[1007]        :                                       ;pop CX
[1008]        :                                       
[1009]    096C: B8 00 00                              mov ax,0h
[1010]    096F: 8A C5                                 mov al,ch
[1011]    0971: B6 64                                 mov dh,100d
[1012]    0973: F6 E6                                 mul dh
[1013]    0975: 5A                                    pop dx
[1014]    0976: 03 D0                                 add dx,ax
[1015]    0978: 52                                    push dx
[1016]        :                                       
[1017]    0979: B8 00 00                              mov ax,0h
[1018]    097C: 8A C1                                 mov al,cl
[1019]    097E: B6 01                                 mov dh,1d
[1020]    0980: F6 E6                                 mul dh
[1021]    0982: 5A                                    pop dx
[1022]    0983: 03 D0                                 add dx,ax
[1023]        :                                       
[1024]        :                                       ;mov dx,bx
[1025]        :                                       ;DX now contains binary equivalent
[1026]    0985: 5B                                    pop BX
[1027]    0986: 59                                    pop CX
[1028]    0987: 58                                    pop AX
[1029]    0988: C3                                    ret
[1030]        :                                       bcd_to_bin endp																												;///////////////////END OF BCD_TO_BIN SUBROUTINE///////
[1031]        :                                       
[1032]    0989:                                       bin_to_bcd proc near	;Check for equivalent instruction in 8086									;//////////////////START OF BIN_TO_BCD SUBPROG///////////
[1033]        :                                       ;input=2 byte binary no.(maximum 65535) in DX
[1034]        :                                       ;        di register has mem loc to store bcd no.
[1035]        :                                       ;output= 5 bytes in [di] to [di+4] containing digits of bcd no. eg 2^16 -1 -> 0605050305
[1036]    0989: 50                                    push AX
[1037]    098A: 53                                    push BX
[1038]    098B: 51                                    push CX
[1039]        :                                       
[1040]    098C: 8B C2                                 mov ax,dx
[1041]    098E: BA 00 00                              mov dx,0h
[1042]        :                                       
[1043]    0991: BB 10 27                              mov bx,10000d
[1044]    0994: F7 F3                                 div bx
[1045]        :                                       ;remainder in dx, quotient in ax(will not exceed 09)
[1046]    0996: 88 05                                 mov [di],al
[1047]    0998: 47                                    inc di
[1048]        :                                       
[1049]    0999: 8B C2                                 mov ax,dx
[1050]    099B: BA 00 00                              mov dx,0h
[1051]    099E: BB E8 03                              mov bx,1000d
[1052]    09A1: F7 F3                                 div bx
[1053]    09A3: 88 05                                 mov [di],al
[1054]    09A5: 47                                    inc di
[1055]        :                                       
[1056]    09A6: 8B C2                                 mov ax,dx
[1057]    09A8: BA 00 00                              mov dx,0h
[1058]    09AB: BB 64 00                              mov bx,100d
[1059]    09AE: F7 F3                                 div bx
[1060]    09B0: 88 05                                 mov [di],al
[1061]    09B2: 47                                    inc di
[1062]        :                                       
[1063]    09B3: 8B C2                                 mov ax,dx
[1064]    09B5: BA 00 00                              mov dx,0h
[1065]    09B8: BB 0A 00                              mov bx,10d
[1066]    09BB: F7 F3                                 div bx
[1067]    09BD: 88 05                                 mov [di],al
[1068]    09BF: 47                                    inc di
[1069]        :                                       
[1070]    09C0: 8B C2                                 mov ax,dx
[1071]    09C2: BA 00 00                              mov dx,0h
[1072]    09C5: BB 01 00                              mov bx,1d
[1073]    09C8: F7 F3                                 div bx
[1074]    09CA: 88 05                                 mov [di],al
[1075]        :                                       
[1076]    09CC: 4F                                    dec di
[1077]    09CD: 4F                                    dec di
[1078]    09CE: 4F                                    dec di
[1079]    09CF: 4F                                    dec di
[1080]        :                                       
[1081]    09D0: 59                                    pop CX
[1082]    09D1: 5B                                    pop BX
[1083]    09D2: 58                                    pop AX
[1084]    09D3: C3                                    ret
[1085]        :                                       bin_to_bcd endp																																	;//////////END OF BIN_TO_BCD SUBPROGRAM////////////////
[1086]        :                                       
[1087]        :                                       
[1088]    09D4:                                       get_keypress proc near 																													;//////////START OF GETKEYPRESS SUBPROG///////////////
[1089]    09D4: 50                                    push AX
[1090]        :                                       
[1091]    09D5:                                       lk_closed:
[1092]        :                                       ;check if no keys are pressed(all high)
[1093]    09D5: E4 04                                 in al,04h
[1094]    09D7: 24 F0                                 and al,0f0h ;We only want higher bits
[1095]    09D9: 3C F0                                 cmp al,0f0h
[1096]    09DB: 75 F8                                 jne lk_closed
[1097]        :                                       
[1098]    09DD: E8 40 FF                              call delay_deb
[1099]        :                                       
[1100]        :                                       ;No keys are pressed
[1101]        :                                       ;check if key is pressed/ lock is closed
[1102]    09E0:                                       sec_stop:
[1103]    09E0: E4 04                                 in al,04h
[1104]    09E2: 24 F0                                 and al,0f0h
[1105]    09E4: 3C F0                                 cmp al,0f0h
[1106]    09E6: 74 F8                                 je sec_stop
[1107]        :                                       ;1 key is pressed
[1108]        :                                       
[1109]        :                                       ;check if lock is closed
[1110]    09E8: 3C 70                                 cmp al,070h
[1111]    09EA: 75 06                                 jne th_stop
[1112]        :                                       ;code for disabling system
[1113]    09EC: B7 FF                                 mov bh,0FFh
[1114]    09EE: 58                                    pop AX
[1115]    09EF: E9 8D FA                              jmp reset_stack_check_lock
[1116]        :                                       
[1117]        :                                       
[1118]    09F2:                                       th_stop:
[1119]    09F2: E8 2B FF                              call delay_deb
[1120]        :                                       
[1121]    09F5: E4 04                                 in al,04h
[1122]    09F7: 24 F0                                 and al,0f0h
[1123]    09F9: 3C F0                                 cmp al,0f0h
[1124]    09FB: 74 E3                                 je sec_stop
[1125]        :                                       
[1126]        :                                       ;decoding keypress
[1127]        :                                       ;storing PC4-PC7 in ah
[1128]    09FD: E4 04                                 in al,04h
[1129]    09FF: 24 F0                                 and al,0f0h
[1130]    0A01: 8A E0                                 mov ah,al
[1131]    0A03: D0 CC D0 CC D0 CC D0 CC               ror ah,04h
[1132]        :                                       
[1133]    0A0B:                                       A1:
[1134]    0A0B: B0 FE                                 mov al,0feh
[1135]    0A0D: E6 00                                 out 00h,al
[1136]    0A0F: E4 04                                 in al,04h
[1137]    0A11: 24 F0                                 and al,0f0h
[1138]    0A13: 3C F0                                 cmp al,0f0h
[1139]    0A15: 74 04                                 je A2:
[1140]    0A17: B0 FE                                 mov al,0feh
[1141]    0A19: EB 73                                 jmp decode
[1142]        :                                       
[1143]    0A1B:                                       A2:
[1144]    0A1B: B0 FD                                 mov al,0fdh
[1145]    0A1D: E6 00                                 out 00h,al
[1146]    0A1F: E4 04                                 in al,04h
[1147]    0A21: 24 F0                                 and al,0f0h
[1148]    0A23: 3C F0                                 cmp al,0f0h
[1149]    0A25: 74 04                                 je A3:
[1150]    0A27: B0 FD                                 mov al,0fdh
[1151]    0A29: EB 63                                 jmp decode
[1152]        :                                       
[1153]    0A2B:                                       A3:
[1154]    0A2B: B0 FB                                 mov al,0fbh
[1155]    0A2D: E6 00                                 out 00h,al
[1156]    0A2F: E4 04                                 in al,04h
[1157]    0A31: 24 F0                                 and al,0f0h
[1158]    0A33: 3C F0                                 cmp al,0f0h
[1159]    0A35: 74 04                                 je A4:
[1160]    0A37: B0 FB                                 mov al,0fbh
[1161]    0A39: EB 53                                 jmp decode
[1162]        :                                       
[1163]    0A3B:                                       A4:
[1164]    0A3B: B0 F7                                 mov al,0f7h
[1165]    0A3D: E6 00                                 out 00h,al
[1166]    0A3F: E4 04                                 in al,04h
[1167]    0A41: 24 F0                                 and al,0f0h
[1168]    0A43: 3C F0                                 cmp al,0f0h
[1169]    0A45: 74 04                                 je A5:
[1170]    0A47: B0 F7                                 mov al,0f7h
[1171]    0A49: EB 43                                 jmp decode
[1172]        :                                       
[1173]    0A4B:                                       A5:
[1174]    0A4B: B0 EF                                 mov al,0efh
[1175]    0A4D: E6 00                                 out 00h,al
[1176]    0A4F: E4 04                                 in al,04h
[1177]    0A51: 24 F0                                 and al,0f0h
[1178]    0A53: 3C F0                                 cmp al,0f0h
[1179]    0A55: 74 04                                 je A6:
[1180]    0A57: B0 EF                                 mov al,0efh
[1181]    0A59: EB 33                                 jmp decode
[1182]        :                                       
[1183]    0A5B:                                       A6:
[1184]    0A5B: B0 DF                                 mov al,0dfh
[1185]    0A5D: E6 00                                 out 00h,al
[1186]    0A5F: E4 04                                 in al,04h
[1187]    0A61: 24 F0                                 and al,0f0h
[1188]    0A63: 3C F0                                 cmp al,0f0h
[1189]    0A65: 74 04                                 je A7:
[1190]    0A67: B0 DF                                 mov al,0dfh
[1191]    0A69: EB 23                                 jmp decode
[1192]        :                                       
[1193]    0A6B:                                       A7:
[1194]    0A6B: B0 BF                                 mov al,0bfh
[1195]    0A6D: E6 00                                 out 00h,al
[1196]    0A6F: E4 04                                 in al,04h
[1197]    0A71: 24 F0                                 and al,0f0h
[1198]    0A73: 3C F0                                 cmp al,0f0h
[1199]    0A75: 74 04                                 je A8:
[1200]    0A77: B0 BF                                 mov al,0bfh
[1201]    0A79: EB 13                                 jmp decode
[1202]        :                                       
[1203]    0A7B:                                       A8:
[1204]    0A7B: B0 7F                                 mov al,07fh
[1205]    0A7D: E6 00                                 out 00h,al
[1206]    0A7F: E4 04                                 in al,04h
[1207]    0A81: 24 F0                                 and al,0f0h
[1208]    0A83: 3C F0                                 cmp al,0f0h
[1209]        :                                       ;check for keypress again, if not found till now
[1210]    0A85: 75 03 E9 56 FF                        je sec_stop
[1211]    0A8A: B0 7F                                 mov al,07fh
[1212]    0A8C: EB 00                                 jmp decode
[1213]        :                                       
[1214]    0A8E:                                       decode:
[1215]        :                                       ;Now ah,al contains the code for the keypress
[1216]        :                                       ;We will refer to a lookup table(in di) to convert to a more useful code
[1217]        :                                       
[1218]    0A8E: 57                                    push DI
[1219]        :                                       ;This address is where the lookup table is stored(Change)
[1220]    0A8F: BF 03 04                              lea di,key_press_table
[1221]        :                                       ;0EFE~ Key 0 pressed
[1222]        :                                       ;0EFE000EFD010EFB02
[1223]    0A92:                                       find:
[1224]    0A92: 2E 8B 15                              mov dx,word ptr cs:[di]
[1225]    0A95: 3B C2                                 cmp ax, dx
[1226]    0A97: 74 05                                 je found
[1227]    0A99: 47                                    inc di
[1228]    0A9A: 47                                    inc di
[1229]    0A9B: 47                                    inc di
[1230]    0A9C: EB F4                                 jmp find    ;Hopefully this should never be stuck in an infinte loop
[1231]        :                                       
[1232]    0A9E:                                       found:
[1233]    0A9E: 47                                    inc di
[1234]    0A9F: 47                                    inc di
[1235]    0AA0: 2E 8A 3D                              mov bh,cs:[di]
[1236]    0AA3: 5F                                    pop DI
[1237]    0AA4: 58                                    pop AX
[1238]    0AA5: C3                                    ret
[1239]        :                                       
[1240]        :                                       get_keypress endp																										;/////////////GET_KEYPRESS SUBROUTINE SUBPROG///////////////////////
[1241]        :                                       
[1242]        :                                       
[1243]        :                                       
[1244]        :                                       																  ;////////////////////////////////////////////////////////////////////
[1245]        :                                       																													        ;/																																	 /
[1246]        :                                       ;/							START OF LCD FUNCTIONS															 /	
[1247]        :                                       																																	;/																																	 /
[1248]        :                                       ;////////////////////////////////////////////////////////////////////
[1249]        :                                       
[1250]        :                                       
[1251]        :                                       
[1252]    0AA6:                                       PROC LCD_INIT																											;/////////////START OF LCD_INIT////////////////////////////////////
[1253]    0AA6: B0 D0                                 MOV AL,0d0H
[1254]    0AA8: E6 04                                 OUT 04h,AL ;SETTING RW TO 0
[1255]    0AAA: B9 64 00                              MOV CX,100
[1256]    0AAD: E8 7B 00                              CALL DELAY
[1257]        :                                       
[1258]    0AB0: B0 E0                                 MOV AL,0E0H
[1259]    0AB2: E6 04                                 OUT 04h,AL ;SETTING RS TO 0
[1260]    0AB4: B9 64 00                              MOV CX,100
[1261]    0AB7: E8 71 00                              CALL DELAY
[1262]        :                                       
[1263]    0ABA: B0 B0                                 MOV AL,0B0H
[1264]    0ABC: E6 04                                 OUT PORTC,AL ;SETTING E TO 0
[1265]    0ABE: B9 C8 00                              MOV CX,200
[1266]    0AC1: E8 67 00                              CALL DELAY
[1267]        :                                       
[1268]        :                                       ;RESET SEQUENCE
[1269]    0AC4: B4 30                                 MOV AH,30H
[1270]    0AC6: E8 31 00                              CALL LCD_CMD
[1271]    0AC9: B9 FA 00                              MOV CX,250
[1272]    0ACC: E8 5C 00                              CALL DELAY
[1273]        :                                       
[1274]    0ACF: B4 30                                 MOV AH,30H
[1275]    0AD1: E8 26 00                              CALL LCD_CMD
[1276]    0AD4: B9 32 00                              MOV CX,50
[1277]    0AD7: E8 51 00                              CALL DELAY
[1278]        :                                       
[1279]    0ADA: B4 30                                 MOV AH,30H
[1280]    0ADC: E8 1B 00                              CALL LCD_CMD
[1281]    0ADF: B9 F4 01                              MOV CX,500
[1282]    0AE2: E8 46 00                              CALL DELAY
[1283]        :                                       
[1284]        :                                       ;FUNCTION SET
[1285]    0AE5: B4 30                                 MOV AH,30h  ;USE TWO LINES AND 5*8 MATRIX
[1286]    0AE7: E8 10 00                              CALL LCD_CMD
[1287]        :                                       
[1288]    0AEA: B4 0C                                 MOV AH,0Ch  ;DISPLAY ON CURSOR OFF
[1289]    0AEC: E8 0B 00                              CALL LCD_CMD
[1290]        :                                       
[1291]    0AEF: B4 01                                 MOV AH,01H ;CLEAR SCREEN
[1292]    0AF1: E8 06 00                              CALL LCD_CMD
[1293]        :                                       
[1294]    0AF4: B4 06                                 MOV AH,06h;INCREMENT CURSOR
[1295]    0AF6: E8 01 00                              CALL LCD_CMD
[1296]        :                                       
[1297]    0AF9: C3                                    RET
[1298]        :                                       ENDP LCD_INIT																											;/////////////////END OF LCD_INIT////////////////////////////////////
[1299]        :                                       
[1300]        :                                       
[1301]        :                                       
[1302]        :                                       ;sends commands to LCD
[1303]    0AFA:                                       PROC LCD_CMD																											;///////////START OF LCD_CMD/////////////////////////////////////////
[1304]        :                                       ;input: AH = command code
[1305]        :                                       ;output: none
[1306]        :                                       
[1307]        :                                       ;save registers
[1308]    0AFA: 52                                    PUSH DX
[1309]    0AFB: 50                                    PUSH AX
[1310]        :                                       ;make rs=0
[1311]    0AFC: E4 04                                 in al,04h
[1312]        :                                       ;MOV AL,PORTC_VAL
[1313]    0AFE: 24 FD                                 AND AL,0FDH     ;En-RS-RW
[1314]    0B00: E8 85 00                              CALL OUT_C
[1315]        :                                       ;set out data pins
[1316]    0B03: 8A C4                                 MOV AL,AH
[1317]    0B05: E8 79 00                              CALL OUT_B
[1318]        :                                       ;make En=1
[1319]    0B08: E4 04                                 in al,04h
[1320]        :                                       ;MOV AL,PORTC_VAL
[1321]    0B0A: 0C 04                                 OR  AL,100B     ;En-RS-RW
[1322]    0B0C: E8 79 00                              CALL OUT_C
[1323]        :                                       ;delay 1ms
[1324]    0B0F: B9 32 00                              MOV CX,50
[1325]    0B12: E8 16 00                              CALL DELAY
[1326]        :                                       ;make En=0
[1327]    0B15: E4 04                                 in al,04h
[1328]        :                                       ;MOV AL,PORTC_VAL
[1329]    0B17: 24 FB                                 AND AL,0FBH     ;En-RS-RW
[1330]    0B19: E8 6C 00                              CALL OUT_C
[1331]        :                                       ;delay 1ms
[1332]    0B1C: B9 32 00                              MOV CX,50
[1333]    0B1F: E8 09 00                              CALL DELAY
[1334]        :                                       ;restore registers
[1335]    0B22: 58                                    POP AX
[1336]    0B23: 5A                                    POP DX
[1337]    0B24: C3                                    RET
[1338]        :                                       ENDP LCD_CMD
[1339]        :                                       
[1340]    0B25:                                       PROC LCD_CLEAR      ;TO CLEAR SCREEN														;///////////////////////START LCD_CLEAR//////////////////////////
[1341]    0B25: B4 01                                 MOV AH,1
[1342]    0B27: E8 D0 FF                              CALL LCD_CMD
[1343]    0B2A: C3                                    RET
[1344]        :                                       ENDP LCD_CLEAR																									;//////////////////////ENDD OF LCD_CLEAR////////////////////////
[1345]        :                                       
[1346]        :                                       
[1347]    0B2B:                                       DELAY proc near																									;///////////////////START OF DELAY//////////////////////////////
[1348]        :                                       ;input: CX, this value controls the delay. CX=50 means 1ms
[1349]        :                                       ;output: none
[1350]    0B2B: E3 02                                 	JCXZ DELAY_END
[1351]    0B2D:                                       	DEL_LOOP:
[1352]    0B2D: E2 FE                                 	LOOP DEL_LOOP	
[1353]    0B2F:                                       	DELAY_END:
[1354]    0B2F: C3                                    RET
[1355]        :                                       DELAY endp																											;/////////////// END OF DELAY/////////////////////////////////
[1356]        :                                       
[1357]        :                                       
[1358]        :                                       ;writes a character on current cursor position
[1359]    0B30:                                       PROC LCD_WRITE_CHAR																							;/////////////START OF WRITE_CHAR////////////////////////////
[1360]        :                                       ;input: AH
[1361]        :                                       ;output: none
[1362]        :                                       ;save registers
[1363]    0B30: 50                                    PUSH AX
[1364]        :                                       ;set RS=1
[1365]    0B31: E4 04                                 in al,04h
[1366]        :                                       ;MOV AL,PORTC_VAL
[1367]    0B33: 0C 02                                 OR  AL,10B      ;EN-RS-RW
[1368]    0B35: E8 50 00                              CALL OUT_C
[1369]        :                                       ;set out the data pins
[1370]    0B38: 8A C4                                 MOV AL,AH
[1371]    0B3A: E8 44 00                              CALL OUT_B
[1372]        :                                       ;set En=1
[1373]    0B3D: E4 04                                 in al,04h
[1374]        :                                       ;MOV AL,PORTC_VAL
[1375]    0B3F: 0C 04                                 OR  AL,100B     ;EN-RS-RW
[1376]    0B41: E8 44 00                              CALL OUT_C
[1377]        :                                       ;delay 1ms
[1378]    0B44: B9 32 00                              MOV CX,50
[1379]    0B47: E8 E1 FF                              CALL DELAY
[1380]        :                                       ;set En=0
[1381]    0B4A: E4 04                                 in al,04h
[1382]        :                                       ;MOV AL,PORTC_VAL
[1383]    0B4C: 24 FB                                 AND AL,0FBH     ;EN-RS-RW
[1384]    0B4E: E8 37 00                              CALL OUT_C
[1385]        :                                       ;return
[1386]    0B51: 58                                    POP AX
[1387]    0B52: C3                                    RET
[1388]        :                                       ENDP LCD_WRITE_CHAR																				;/////////////////////END OF WRITE_CHAR SUBPROG/////////////////////				
[1389]        :                                       
[1390]        :                                       
[1391]        :                                       ;sets the cursor
[1392]    0B53:                                       PROC LCD_SET_CUR																					;////////////////////START OF LCD_SET_CUR//////////////////////////
[1393]        :                                       ;input: DL=ROW, DH=COL
[1394]        :                                       ;       DL = 1, means upper row
[1395]        :                                       ;       DL = 2, means lower row
[1396]        :                                       ;       DH = 1-8, 1st column is 1
[1397]        :                                       ;output: none
[1398]        :                                       
[1399]        :                                       ;save registers
[1400]    0B53: 50                                    PUSH AX
[1401]        :                                       ;LCD uses 0 based column index
[1402]    0B54: FE CE                                 DEC DH
[1403]        :                                       ;select case
[1404]    0B56: 80 FA 01                              CMP DL,1
[1405]    0B59: 74 07                                 JE  @ROW1
[1406]    0B5B: 80 FA 02                              CMP DL,2
[1407]    0B5E: 74 06                                 JE  @ROW2
[1408]    0B60: EB 0D                                 JMP @LCD_SET_CUR_END
[1409]        :                                       
[1410]        :                                       ;if DL==1 then
[1411]    0B62:                                       @ROW1:
[1412]    0B62: B4 80                                 MOV AH,80H
[1413]    0B64: EB 04                                 JMP @LCD_SET_CUR_ENDCASE
[1414]        :                                       
[1415]        :                                       ;if DL==2 then
[1416]    0B66:                                       @ROW2:
[1417]    0B66: B4 C0                                 MOV AH,0C0H
[1418]    0B68: EB 00                                 JMP @LCD_SET_CUR_ENDCASE
[1419]        :                                       
[1420]        :                                       ;execute the command
[1421]    0B6A:                                       @LCD_SET_CUR_ENDCASE:
[1422]    0B6A: 02 E6                                 ADD AH,DH
[1423]    0B6C: E8 8B FF                              CALL LCD_CMD
[1424]        :                                       
[1425]        :                                       ;exit from procedure
[1426]    0B6F:                                       @LCD_SET_CUR_END:
[1427]    0B6F: 58                                    POP AX
[1428]    0B70: C3                                    RET
[1429]        :                                       ENDP LCD_SET_CUR																							;//////////////////////END OF LCD_SET_CUR/////////////////////////
[1430]        :                                       
[1431]    0B71:                                       PROC LCD_SHOW_CUR																							;///////////////////START OF LCD_SHOW_CUR/////////////////////////
[1432]        :                                       ;input: none
[1433]        :                                       ;output: none
[1434]    0B71: 50                                    PUSH AX
[1435]    0B72: B4 0F                                 MOV AH,0FH
[1436]    0B74: E8 83 FF                              CALL LCD_CMD
[1437]    0B77: 58                                    POP AX
[1438]    0B78: C3                                    RET
[1439]        :                                       ENDP LCD_SHOW_CUR																						;///////////////////END OF LCD_SHOW_CUR/////////////////////////
[1440]        :                                       
[1441]    0B79:                                       PROC LCD_HIDE_CUR																						;///////////////////START OF HIDE_CUR/////////////////////////
[1442]        :                                       ;input: none
[1443]        :                                       ;output: none
[1444]    0B79: 50                                    PUSH AX
[1445]    0B7A: B4 0C                                 MOV AH,0CH
[1446]    0B7C: E8 7B FF                              CALL LCD_CMD
[1447]    0B7F: 58                                    POP AX
[1448]    0B80: C3                                    RET
[1449]        :                                       ENDP LCD_HIDE_CUR																						;///////////////////END OF LCD_HIDE_CUR/////////////////////////
[1450]        :                                       
[1451]    0B81:                                       PROC OUT_B  																								;///////////////////START OF PROC OUT_B/////////////////////////
[1452]        :                                       ;SENDS VALUE IN AL TO DATA LINES OF LCD AND STORES THAT VAL IN PORTB_VAL
[1453]        :                                       ;input: AL
[1454]        :                                       ;output: PORTB_VAL
[1455]    0B81: 52                                    PUSH DX
[1456]    0B82: BA 02 00                              MOV DX,02h
[1457]    0B85: EE                                    OUT DX,AL
[1458]        :                                       ;MOV PORTB_VAL,AL
[1459]    0B86: 5A                                    POP DX
[1460]    0B87: C3                                    RET
[1461]        :                                       ENDP OUT_B																									;///////////////////END OF OUT_B PROC/////////////////////////
[1462]        :                                       
[1463]    0B88:                                       PROC OUT_C 																									;///////////////////START OF OUT_C PROC/////////////////////////
[1464]        :                                       ;USED TO SET VALUES OF RS, RW AND E
[1465]        :                                       ;input: AL
[1466]        :                                       ;output: PORTC_VAL
[1467]    0B88: 52                                    PUSH DX
[1468]    0B89: BA 04 00                              MOV DX,04h
[1469]    0B8C: EE                                    OUT DX,AL
[1470]        :                                       ;MOV PORTC_VAL,AL
[1471]    0B8D: 5A                                    POP DX
[1472]    0B8E: C3                                    RET
[1473]        :                                       ENDP OUT_C 																									;///////////////////END OF OUT_C PROC/////////////////////////	
[1474]        :                                       
[1475]        :                                       
[1476]        :                                       
[1477]        :                                       
[1478]        :                                       
[1479]        :                                       
[1480]        :                                       
[1481]        :                                       
[1482]        :                                       
[1483]        :                                       
[1484]        :                                       
[1485]        :                                       
 
===================================================================================================
 




===================================================================================================
